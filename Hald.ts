export class Hald {
    lutSize: number;
    constructor(lutSize: number) {
        this.lutSize = lutSize
    }

    createHald(lutSize?: number): void {
        if (!lutSize) lutSize = this.lutSize;

        let haldSize = Math.round((this.lutSize ** 3) ** 0.5);
        let hald = document.createElement("canvas");
        hald.width = hald.height = haldSize;

        let haldData = hald.getContext("2d");
        let r: number, g: number, b: number = g = r = 0;

        for (let y = 0; y < hald.height; y++) {
            for (let x = 0; x < hald.width; x++) {
                if (r >= this.lutSize) {
                    r = 0
                    g += 1
                }
                if (g >= this.lutSize) {
                    g = 0
                    b += 1
                }
                this.setPixel(haldData, [r, g, b], [x, y], lutSize);
                r += 1
            }
        }
        this.exportHald(hald, lutSize);
    }

    private exportHald(target: HTMLCanvasElement, lutSize: number) {
        let download = document.createElement('a');
        download.download = "Neutral_" + lutSize + ".png";
        download.href = target.toDataURL("image/png");
        download.name = "Export HALD";
        download.click();
    }

    private setPixel(target: CanvasRenderingContext2D, values: number[], position: number[], lutSize: number) {

        function value(color: number) {
            return Math.round((255 / (lutSize - 1)) * color)
        }

        target.fillStyle = "rgb(" + value(values[0]) + "," + value(values[1]) + "," + value(values[2]) + ")";
        target.fillRect(position[0], position[1], 1, 1);
    }

    exportCube(lutTitle?: string): void {
        if (!lutTitle) lutTitle = "lutCreatorJs";
        let hald = document.createElement('canvas');
        let haldData = hald.getContext('2d');

        this.inputHald(lutTitle, hald, haldData);
    }

    private createCube(text: string, lutTitle: string) {
        let exportFile = document.createElement('a');
        let file = new Blob([text], { type: 'text/plain' });
        exportFile.href = URL.createObjectURL(file);
        exportFile.download = lutTitle + '.cube';
        exportFile.click();
    }

    private setText(lutSize: number, lutTitle: string): string {
        let text: string = "#Generated by lutCreator.js\n#Coded by SirSerch\n#https://github.com/SirSerch/LutCreatorJs\n";
        text += ("TITLE " + lutTitle + "_" + lutSize + "\n");
        text += ("LUT_3D_SIZE " + lutSize + "\n\n");
        return text;
    }

    private inputHald(lutTitle: string, hald: HTMLCanvasElement, haldData: CanvasRenderingContext2D) {
        let selectFile = document.createElement('input');
        selectFile.type = 'file';
        selectFile.click();
        selectFile.onchange = (e) => {
            this.loadImage(selectFile.files, lutTitle, hald, haldData);
        }
    }

    private loadImage(file: FileList, lutTitle: string, hald: HTMLCanvasElement, haldData: CanvasRenderingContext2D) {
        let imageReader = new FileReader();
        imageReader.onload = () => {
            let imageHald = new Image();
            imageHald.onload = () => {
                this.generateCube(imageHald, lutTitle, hald, haldData);
            }
            imageHald.src = String(imageReader.result);
        }
        imageReader.readAsDataURL(file[0]);
    }

    private generateCube(image: HTMLImageElement, lutTitle: string, hald: HTMLCanvasElement, haldData: CanvasRenderingContext2D) {
        hald.width = hald.height = image.width;
        haldData.drawImage(image, 0, 0);

        let lutSize = Math.round((hald.width * hald.height) ** 0.3333);
        console.log(lutSize);

        let cube = this.setText(lutSize, lutTitle);
        for (let y = 0; y < hald.height; y++) {
            for (let x = 0; x < hald.width; x++) {
                var r = (haldData.getImageData(x, y, 1, 1).data[0] / 255).toFixed(6);
                var g = (haldData.getImageData(x, y, 1, 1).data[1] / 255).toFixed(6);
                var b = (haldData.getImageData(x, y, 1, 1).data[2] / 255).toFixed(6);
                cube += r + " " + g + " " + b + "\n";
            }
        }

        this.createCube(cube, lutTitle);
    }
}
